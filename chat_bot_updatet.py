import logging
import os
import sqlite3
from telegram import Update, Message
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.helpers import escape_markdown

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = "8279354110:AAFkY5C2nELbeVby2SmGXM0hUykzUHsgQfw"
DB_NAME = "audio_database.db"
ADMIN_ID = 1127227960  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® ID
# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

def initialize_db():
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS audio_files (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title_lower TEXT NOT NULL UNIQUE,
            original_title TEXT NOT NULL,
            added_by_username TEXT,
            added_by_first_name TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
        """)
        conn.commit()
        conn.close()
        logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{DB_NAME}' —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except sqlite3.Error as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ –±–∞–∑—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –≤ –±–∞–∑—É:\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏ –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ –Ω–µ–º—É –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `/add`.\n"
        "   *–ò–õ–ò*\n"
        "2. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª, –∞ –∑–∞—Ç–µ–º –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π `/add`.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start, /help, /add, /list, /reset (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"
    )

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /reset –±–µ–∑ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        await update.message.reply_text("‚õîÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞.")
        return

    try:
        if os.path.exists(DB_NAME):
            os.remove(DB_NAME)
        initialize_db()
        await update.message.reply_text("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –±—ã–ª–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
        logger.warning(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (ID: {user_id}).")
    except Exception as e:
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
async def list_songs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT original_title FROM audio_files ORDER BY original_title ASC")
        results = cursor.fetchall()
        conn.close()
        
        if not results:
            await update.message.reply_text("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
            return
            
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        header = f"üéß *–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–µ–∫–æ–≤ –≤ –±–∞–∑–µ \\({len(results)} —à—Ç\\.\\):*\n\n"
        message_chunks = []
        current_chunk = header
        
        for index, row in enumerate(results):
            # escape_markdown –∑–∞—â–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
            safe_title = escape_markdown(row[0], version=2)
            line = f"{index + 1}\\. {safe_title}\n"
            if len(current_chunk) + len(line) > 4096:
                message_chunks.append(current_chunk)
                current_chunk = ""
            current_chunk += line
        
        message_chunks.append(current_chunk)
        
        for chunk in message_chunks:
            await update.message.reply_text(chunk, parse_mode="MarkdownV2")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_songs: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–µ—Å–µ–Ω.")

async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = update.effective_message
    user = update.effective_user
    
    audio_to_process = None
    if message.audio:
        audio_to_process = message.audio
    elif message.reply_to_message and message.reply_to_message.audio:
        audio_to_process = message.reply_to_message.audio
    
    if not audio_to_process:
        await message.reply_text("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –≤–º–µ—Å—Ç–µ —Å –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–º.")
        return

    title = audio_to_process.title
    if not title:
        safe_filename = escape_markdown(audio_to_process.file_name, version=2)
        await message.reply_text(f"–£ —Ñ–∞–π–ª–∞ `{safe_filename}` –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –º–µ—Ç–∞\\-—Ç–µ–≥–∞—Ö\\.", parse_mode="MarkdownV2")
        return
        
    try:
        conn = sqlite3.connect(DB_NAME)
        cursor = conn.cursor()
        title_lower = title.lower()
        
        cursor.execute("SELECT added_by_first_name, added_by_username FROM audio_files WHERE title_lower = ?", (title_lower,))
        result = cursor.fetchone()

        safe_title = escape_markdown(title, version=2)
        safe_first_name = escape_markdown(user.first_name, version=2)
        safe_username = escape_markdown(user.username or "N/A", version=2)

        response_text = ""
        if result:
            original_sender_name, original_sender_username = result
            safe_orig_name = escape_markdown(original_sender_name, version=2)
            safe_orig_user = escape_markdown(original_sender_username or "N/A", version=2)
            response_text = (
                f"‚ö†Ô∏è *–ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç\\!* \n\n"
                f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* `{safe_title}`\n\n"
                f"–≠—Ç–æ—Ç —Ç—Ä–µ–∫ —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω *{safe_orig_name}* \\(@{safe_orig_user}\\)\\."
            )
        else:
            cursor.execute(
                "INSERT INTO audio_files (title_lower, original_title, added_by_username, added_by_first_name) VALUES (?, ?, ?, ?)",
                (title_lower, title, user.username or 'N/A', user.first_name)
            )
            conn.commit()
            response_text = (
                f"‚úÖ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É\\!* \n\n"
                f"üéß *–ù–∞–∑–≤–∞–Ω–∏–µ:* `{safe_title}`\n"
                f"*–î–æ–±–∞–≤–∏–ª:* {safe_first_name} \\(@{safe_username}\\)"
            )
        
        conn.close()
        await message.reply_text(response_text, parse_mode="MarkdownV2")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_command: {e}")
        await message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")

def main() -> None:
    initialize_db()
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("reset", reset))
    application.add_handler(CommandHandler("list", list_songs))
    application.add_handler(CommandHandler("add", add_command))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ö–æ–º–∞–Ω–¥–∞ /reset –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
    application.run_polling()

if __name__ == "__main__":
    main()